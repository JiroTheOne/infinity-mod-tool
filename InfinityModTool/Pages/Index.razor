@page "/"
@inject InfinityModTool.Services.ModService modService;

@if (showLoadingIcon)
{
    <LoadingScreen></LoadingScreen>
}

@if (showConfirmation)
{
    <PopupConfirm Type="@AlertLevel.Warning" Title="@GetInstallMessage()" Message="This will modify your Disney Infinity 3.0 game installation" ConfirmedChanged="@(async (confirmed) => await InstallUninstall(confirmed, installContext))"></PopupConfirm>
}

@if (showReplaceConfirmation)
{
    <PopupConfirmReplace Type="@AlertLevel.Warning" Title="@GetInstallMessage()" Message="Please select a character below to replace, This will modify your Disney Infinity 3.0 game installation" ConfirmedPressed="@(async (id) => await InstallUninstall(id, installContext))" CancelPressed="() => showReplaceConfirmation = false" Options="@modService.GetAvailableReplacementCharacters(installContext.CharacterID)"></PopupConfirmReplace>
}

@if (showWarning)
{
    <PopupAlert Message="@warningMessage" OnDismissed="@(() => showWarning = false)" Show="@showWarning"></PopupAlert>
}

@if (!string.IsNullOrEmpty(warningMessage))
{
    <BannerAlert Type="Warning" Message="@warningMessage"></BannerAlert>
}

@foreach (var mod in modService.AvailableCharacterMods)
{
    <CharacterButton IDName="@mod.Name" DisplayName="@mod.DisplayName" DisplayImage="@mod.DisplayImage" DisplayColor="@mod.DisplayColor" ReplacementMod="@mod.ReplaceCharacter" Installed="@modService.IsModInstalled(mod.Name)" OnClick="@SelectCharacterMod"></CharacterButton>
}

@code {
    bool showLoadingIcon = false;
    bool showConfirmation = false;
    bool showReplaceConfirmation = false;
    bool showWarning = false;

    bool install = false;
    bool requiresReplacement = false;
    InfinityModTool.Data.CharacterModLink installContext;

    string warningMessage = null;

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(modService.Settings.SteamInstallationPath))
        {
            warningMessage = "Steam installation path has not been set, please set this via the settings tab";
            return;
        }
    }

    void ShowConfirmationModal()
    {
        showConfirmation = true;
    }

    void SelectCharacterMod(string idName)
    {
        if (string.IsNullOrEmpty(modService.Settings.SteamInstallationPath))
        {
            warningMessage = "Steam installation path has not been set, please set this in 'Settings'";
            return;
        }

        var modData = modService.GetCharacterData(idName);
        install = !modService.IsModInstalled(idName);
        installContext = new Data.CharacterModLink() { CharacterID = idName, ReplacementCharacterID = null };
        requiresReplacement = modData.ReplaceCharacter;

        if (requiresReplacement && install)
            showReplaceConfirmation = true;
        else
            showConfirmation = true;
    }

    async Task InstallUninstall(string selectedCharacterID, InfinityModTool.Data.CharacterModLink modification)
    {
        modification.ReplacementCharacterID = selectedCharacterID;
        await InstallUninstall(true, modification);
    }

    async Task InstallUninstall(bool confirm, InfinityModTool.Data.CharacterModLink modification)
    {
        this.showConfirmation = false;
        this.showReplaceConfirmation = false;

        // User has cancelled operation
        if (!confirm)
            return;

        showLoadingIcon = true;

        if (install)
        {
            await modService.InstallCharacterMod(modification.CharacterID, modification.ReplacementCharacterID);
        }
        else
        {
            await modService.UninstallCharacterMod(modification.CharacterID);
        }

        showLoadingIcon = false;
    }

    string GetInstallMessage()
    {
        return install ? "Install Mod?" : "Uninstall Mod?";
    }
}